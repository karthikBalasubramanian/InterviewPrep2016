import java.util.Random;

public class LinkedListApplications {
	
	 public Node reverseList(Node head) {
		 if(head!=null){
		     Node curr = head;
		     Node prev = null;
		     Node next;
		     while(curr!=null){
		    	 next = curr.next;
		    	 curr.next = prev;
		    	 prev = curr;
		    	 curr = next;
		     }
		     head= prev;
			 return head;
		 }
		 else{
			 return null;
		 }
	    }
	 
	 public void recursiveReversePrint(Node head){
//		 here we traverse in the forward direction and then reverse in the backward direction.
		 if(head==null){
			 return;
		 }
		 recursiveReversePrint(head.next);
		 System.out.println(head.data);
	 }
	 
	 public void recursiveReverse(Node curr,LinkedList obj){
		 if(curr.next==null){
			 obj.head = curr;
			 return;
		 }
		 recursiveReverse(curr.next, obj);
		 Node newPrev = curr.next;
		 newPrev.next =curr;
		 curr.next= null;
		 
	 }
	 
	public Node reverseBetweenMandN(Node head,int m,int n){
		// given m < n < total size
		int i =1;
		Node curr = head;
		while(i<n){
			curr = curr.next;
			i++;
		}
		System.out.println(curr.data);
		return null;
	}

	public Node recursiveReverse(Node currNode){
		if(currNode==null || currNode.next==null){
			return currNode;
		}
		Node nextNode = currNode.next;
		Node newHead = recursiveReverse(nextNode);
		// always send newHead back
		nextNode.next = currNode;
		currNode.next=null;
		return newHead;
		
		
	}
	public static void main(String[] args) {
		Random myRandom = new Random(20);
		int[] generator = myRandom.ints(1,50).distinct().limit(5).toArray();
		LinkedList myList = new LinkedList();

		for (int i = 0; i < 5; i++) {
			myList.add(generator[i]);

		}
		myList.display(myList.head);
		LinkedListApplications app = new LinkedListApplications();
		myList.head = app.reverseList(myList.head);
		System.out.println();
		System.out.println("reversing!!!");
		System.out.println();
		myList.display(myList.head);
		LinkedList oneNodeList = new LinkedList();
		System.out.println();
		System.out.println("null list check");
		System.out.println();
		Node oneNodeReverse = app.reverseList(null);
		oneNodeList.display(oneNodeReverse);
		System.out.println();
		System.out.println("trying recursive reverse print");
		System.out.println();
		app.recursiveReversePrint(myList.head);
		System.out.println();
		System.out.println("Recursive return");
		app.recursiveReverse(myList.head, myList);
		System.out.println();
		System.out.println("printing reverse list");
		System.out.println();
		myList.display(myList.head);
		System.out.println();
		System.out.println("using node to return");
		System.out.println();
		myList.head = app.recursiveReverse(myList.head);
		myList.display(myList.head);
		System.out.println();
		System.out.println("between M and N");
		app.reverseBetweenMandN(myList.head,0, 3);

	}

}
